plugins {
    id 'java-library'
    id 'eclipse'
    id 'idea'
    id 'maven-publish'
    id 'net.neoforged.gradle.userdev' version '7.0.145'
}

version = mod_version
group = mod_group_id

repositories {
    mavenLocal()
}

base {
    archivesName = mod_id
}

// Mojang ships Java 17 to end users in 1.18+, so your mod should target Java 21
java.toolchain.languageVersion = JavaLanguageVersion.of(21)

minecraft.accessTransformers.file rootProject.file('src/main/resources/META-INF/accesstransformer.cfg')

jarJar.enable()
tasks.jarJar.configure {
//    archiveClassifier.set('')
}
////tasks.build.dependsOn tasks.jarJar
//
//tasks.named('jarJar') {
//    archiveClassifier.set('')
//}
//jar.finalizedBy('reobfJarJar')

// Default run configurations.
// These can be tweaked, removed, or duplicated as needed.
runs {
    // applies to all the run configs below
    configureEach {
        // Recommended logging data for a userdev environment
        // The markers can be added/remove as needed separated by commas.
        // "SCAN": For mods scan.
        // "REGISTRIES": For firing of registry events.
        // "REGISTRYDUMP": For getting the contents of all registries.
        systemProperty 'forge.logging.markers', 'REGISTRIES'

        // Recommended logging level for the console
        // You can set various levels here.
        // Please read: https://stackoverflow.com/questions/2031163/when-to-use-the-different-log-levels
        systemProperty 'forge.logging.console.level', 'debug'

        modSource project.sourceSets.main
    }

    client {
        // Comma-separated list of namespaces to load gametests from. Empty = all namespaces.
        systemProperty 'forge.enabledGameTestNamespaces', project.mod_id
    }

    server {
        systemProperty 'forge.enabledGameTestNamespaces', project.mod_id
        programArgument '--nogui'
    }

    // This run config launches GameTestServer and runs all registered gametests, then exits.
    // By default, the server will crash when no gametests are provided.
    // The gametest system is also enabled by default for other run configs under the /test command.
    gameTestServer {
        systemProperty 'forge.enabledGameTestNamespaces', project.mod_id
    }

    data {
        // example of overriding the workingDirectory set in configureEach above, uncomment if you want to use it
        // workingDirectory project.file('run-data')

        // Specify the modid for data generation, where to output the resulting resource, and where to look for existing resources.
        programArguments.addAll '--mod', project.mod_id, '--all', '--output', file('src/generated/resources/').getAbsolutePath(), '--existing', file('src/main/resources/').getAbsolutePath()
    }
}

// Include resources generated by data generators.
sourceSets.main.resources { srcDir 'src/generated/resources' }

repositories {
    maven {
        url "https://www.cursemaven.com"
    }
    maven {
        url 'https://maven.blamejared.com'
    }
    maven {
        name = "EMI"
        url = "https://maven.terraformersmc.com/"
    }
    flatDir {
        dir 'libs'
    }
}

dependencies {
    implementation "net.neoforged:neoforge:${neo_version}"

    implementation "local.libs:productivelib-${lib_version}"

    jarJar(group: 'cy.jdkdigital.productivelib', name: 'productivelib', version: '[0.0.5,)') {
        transitive(false)
    }

    compileOnly "mezz.jei:jei-${minecraft_version}-neoforge-api:${jei_version}"
    runtimeOnly "mezz.jei:jei-${minecraft_version}-neoforge:${jei_version}"

    compileOnly "dev.emi:emi-neoforge:${emi_version}:api"
    runtimeOnly "dev.emi:emi-neoforge:${emi_version}"

    compileOnly "com.almostreliable.mods:almostunified-neoforge:1.21-1.0.0:api"
//
//    compileOnly fg.deobf("vazkii.patchouli:Patchouli:${patchouli_version}:api")
//    runtimeOnly fg.deobf("vazkii.patchouli:Patchouli:${patchouli_version}")
//
//    compileOnly(fg.deobf("com.almostreliable.mods:almostunified-forge:${minecraft_version}-${au_version}"))

//    implementation "curse.maven:emi-580555:5436759"
    implementation "curse.maven:jade-324717:5444008"
    implementation "curse.maven:just-enough-archaeology-890755:5518258"
    implementation "curse.maven:cloth-config-348521:5623420"
    implementation "curse.maven:modern-industrialization-405388:5663677"
    implementation "curse.maven:biomes-o-plenty-220318:5512375"
    implementation "curse.maven:glitchcore-955399:5483773"
    implementation "curse.maven:terrablender-neoforge-940057:5429865"
    implementation "curse.maven:regions-unexplored-659110:5579932"
    implementation "curse.maven:extreme-reactors-250277:5538095"
    implementation "curse.maven:zerocore-247921:5464103"
    implementation "curse.maven:cucumber-272335:5663120"
    implementation "curse.maven:mystical-agriculture-246640:5663085"
    implementation "curse.maven:ender-io-64578:5720393"
}

tasks.withType(ProcessResources).configureEach {
    var replaceProperties = [
            minecraft_version      : minecraft_version,
            minecraft_version_range: minecraft_version_range,
            neo_version            : neo_version,
            neo_version_range      : neo_version_range,
            loader_version_range   : loader_version_range,
            mod_id                 : mod_id,
            mod_name               : mod_name,
            mod_license            : mod_license,
            mod_version            : mod_version,
            mod_authors            : mod_authors,
            mod_description        : mod_description,
            lib_version            : lib_version,
            lib_version_range      : lib_version_range,
            jei_version            : jei_version,
            emi_version            : emi_version
    ]
    inputs.properties replaceProperties

    filesMatching(['META-INF/neoforge.mods.toml']) {
        expand replaceProperties
    }
}

// Example configuration to allow publishing using the maven-publish plugin
publishing {
    publications {
        register('mavenJava', MavenPublication) {
            from components.java
        }
    }
    repositories {
        maven {
            url "file://${project.projectDir}/repo"
        }
    }
}

tasks.withType(JavaCompile).configureEach {
    options.encoding = 'UTF-8' // Use the UTF-8 charset for Java compilation
}

idea {
    module {
        downloadSources = true
        downloadJavadoc = true
    }
}